# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# IMPORTS BELOW #

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QFileDialog, QDialog
from PyPDF2 import PdfReader
import os

#################

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 900)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # TABLE DECLARATION #
        self.table = QtWidgets.QTableWidget(self.centralwidget)
        self.table.setGeometry(QtCore.QRect(10, 190, 1661, 770))
        self.table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table.setDragEnabled(False)
        self.table.setDragDropOverwriteMode(False)
        self.table.setDragDropMode(QtWidgets.QAbstractItemView.NoDragDrop)
        self.table.setDefaultDropAction(QtCore.Qt.IgnoreAction)
        self.table.setObjectName("table")

        self.widget1 = QtWidgets.QWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(10, 70, 541, 31))
        self.widget1.setObjectName("widget1")
        self.widget2 = QtWidgets.QWidget(self.centralwidget)
        self.widget2.setGeometry(QtCore.QRect(1210, 20, 441, 41))
        self.widget2.setObjectName("widget2")

        # LABELS DECLARATION #
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")

        self.label_3 = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")

        # PUSH BUTTONS AND WIDGETS DECLARATION#
        self.zmien = QtWidgets.QPushButton(self.centralwidget)
        self.zmien.setGeometry(QtCore.QRect(1520, 70, 131, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.zmien.setFont(font)
        self.zmien.setObjectName("zmien")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 120, 271, 61))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.scan = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.scan.setFont(font)
        self.scan.setObjectName("scan")
        self.horizontalLayout.addWidget(self.scan)
        self.clear = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.clear.setFont(font)
        self.clear.setObjectName("clear")
        self.horizontalLayout.addWidget(self.clear)

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.plik = QtWidgets.QComboBox(self.widget1)
        self.plik.setObjectName("plik")
        self.horizontalLayout_2.addWidget(self.plik)
        self.horizontalLayout_2.addWidget(self.label_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.horizontalLayout_3.addWidget(self.label_3)

        self.localization = QtWidgets.QLineEdit(self.widget2)
        self.localization.setObjectName("localization")
        self.horizontalLayout_3.addWidget(self.localization)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1662, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.table.setColumnCount(4) # Change TABLE COLUMN count to 4
        self.table.setHorizontalHeaderLabels(["File name", "Price", "Invoice number", "Seller"]) # ustawienie nagłówków
        self.table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
        self.table.setColumnWidth(0,200)
        self.table.setColumnWidth(1,410)
        self.table.setColumnWidth(2,410)
        self.table.setColumnWidth(3,600)

        list = []

        # Function that returns an error window alert
        def error(error_type):
                msg = QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText(error_type)
                x = msg.exec_()
                return x

        #Function that shows all .pdf files in our path
        def show_files():
            self.plik.clear()
            path = open("config.txt", 'r')
            if path.mode =='r':
                contents = path.read()
            directories = os.listdir(contents)
            for file in directories: # searching an pdf files
                if file[-3:] == 'pdf':
                    self.plik.addItems([file])

        def lok():
            path = open("config.txt", 'r')
            if path.mode == 'r':
                return path.read()

        #Change path of .pdf files
        def change_localization():
            localization = self.localization.text()
            self.localization.setText("")
            error("Changed localization succesfully.")
            file = open("config.txt", "w")
            file.write(localization)
            file.close()
            self.localization.setText(lok())
            show_files()

        #Scaning files
        def scan_file():
            to_scan = self.plik.currentText()
            localization = lok()
            path = str(localization)+'\\'+str(to_scan)
            reader = PdfReader(path)
            page = reader.pages[0]
            text = page.extract_text()
            remaining = "Pozostało do zapłaty : "
            number = "nr: "
            help1 = "Słownie :"
            help2 = "Nabywca"

            gdzie = text.find(help1)
            gdzie2 = text.find(remaining)
            gdzie3 = text.find(help2)
            gdzie4 = text.find(number)
            kwota = text[gdzie2:gdzie-1]
            numer = text[gdzie4:gdzie3-1]
            nab = " "
            count = 0
            for x in text[gdzie3+1+len(help2):gdzie3+200]:
                if x == '\n':
                    count = count + 1
                    nab=nab+'\n'
                    if count == 4:
                        break
                else:
                    nab = nab+x
            if to_scan in list:
                error("This document was scanned!")

            else:
                self.table.setSortingEnabled(False)
                list.append(to_scan)
                row = self.table.rowCount()+1
                self.table.setRowCount(row)
                self.table.setItem(row-1, 0, QTableWidgetItem(str(to_scan)))
                self.table.setItem(row-1, 1, QTableWidgetItem(str(kwota)))
                self.table.setItem(row-1, 2, QTableWidgetItem(str(numer)))
                self.table.setItem(row-1, 3, QTableWidgetItem(str(nab)))
                self.table.resizeRowsToContents()
                self.table.setSortingEnabled(True)

        #Clear output - table
        def clear():
            self.table.clearContents()
            self.table.setRowCount(0)
            list.clear()
        
        #Actions with buttons
        self.localization.setText(lok())
        self.zmien.clicked.connect(change_localization)
        self.scan.clicked.connect(scan_file)
        self.clear.clicked.connect(clear)
        show_files()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Invoice reader"))
        self.zmien.setText(_translate("MainWindow", "Change"))
        self.scan.setText(_translate("MainWindow", "Scan"))
        self.clear.setText(_translate("MainWindow", "Clear"))
        self.label_2.setText(_translate("MainWindow", "Select file"))
        self.label_3.setText(_translate("MainWindow", "Path .PDF files"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    app.setStyle('Fusion')
    MainWindow.showMaximized()
    sys.exit(app.exec_())
